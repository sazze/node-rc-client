#!/usr/bin/env node

var _ = require('lodash');
var Client = require('../');
var fs = require('fs');
var Getopt = require('node-getopt');
var clc = require('cli-color');
var Liner = require('@sazze/liner');
var path = require('path');
var async = require('async');

var getopt = new Getopt([
  ['d', 'keyDir=DIR', 'directory where key is found'],
  ['c', 'configFile=FILE', 'json file with config options'],
  ['p', 'port=PORT', 'the port to connect to'],
  ['k', 'keyName=NAME', 'the name of the key to use'],
  ['b', 'batchSize=SIZE', 'the max number of hosts to send the\n                         command to at once while reading\n                         from STDIN (default: 20)'],
  ['d', 'delay=TIME', 'time to wait between batches (in ms)'],
  ['r', 'retry=NUM', 'number of times to retry a failed connection\n                         before giving up (default: 0)'],
  ['v', 'verbose', 'display raw response information'],
  ['h', 'help', 'display this help message']
]);

getopt.setHelp(
  'Usage: rc [OPTIONS] [HOST] COMMAND' + "\n" +
  'Send a COMMAND to a HOST running the remote-control service' + "\n" +
  "\n" +
  'HOST        the hostname or ip address of the host to run the command on' + "\n" +
  '            (omit to read the host(s) from STDIN, 1 host per line)' + "\n" +
  'COMMAND     the command to run on the host' + "\n" +
  "\n" +
  '[[OPTIONS]]' + "\n" +
  "\n" +
  'Version: ' + require('../package.json').version + "\n" +
  'Repository: ' + require('../package.json').repository.url.replace('/\.git$/', '') + "\n" +
  "\n" +
  'Examples:' + "\n" +
  "\n" +
  '    rc -c config.json host1.example.com "uname -a"' + "\n" +
  "\n" +
  '    cat hosts.txt | rc -c config.json "uname -a"' + "\n"
);

var opts = getopt.parseSystem();

if (opts.options.help) {
  getopt.showHelp();
  process.exit(0);
}

var options = {};

if (opts.options.configFile) {
  _.merge(options, require(path.resolve(process.cwd(), path.join(path.dirname(opts.options.configFile), path.basename(opts.options.configFile)))));
}

if (opts.options.keyDir) {
  options.keyDir = opts.options.keyDir;
}

if (opts.options.keyName) {
  options.keyName = opts.options.keyName;
}

if (opts.options.port) {
  options.port = opts.options.port;
}

if (parseInt(opts.options.batchSize) > 0) {
  opts.options.batchSize = parseInt(opts.options.batchSize);
} else {
  opts.options.batchSize = 20;
}

if (parseInt(opts.options.delay) > 0) {
  opts.options.delay = parseInt(opts.options.delay);
} else {
  opts.options.delay = 0;
}

if (parseInt(opts.options.retry) > 0) {
  opts.options.retry = parseInt(opts.options.retry);
} else {
  opts.options.retry = 0;
}

if (opts.options.retry) {
  options.retry = opts.options.retry;
}

if (opts.argv.length > 2 || opts.argv.length < 1) {
  console.error('Invalid arguments');
  getopt.showHelp();
  process.exit(1);
}

if (opts.argv.length == 1) {
  // read the host(s) from STDIN and execute the command on all of them
  process.stdin.on('error', function (err) {
    console.error(err.message || err);
    process.exit(2);
  });

  var done = false;

  var hostQueue = async.queue(function (host, done) {
    var o = _.merge({}, options);

    o.host = host.trim().toLowerCase();

    var retryLog = '';
    var client = new Client(o);

    client.on('retry', function (retry, maxRetry) {
      retryLog += 'failed to connect to ' + options.host + '.  retrying (' + retry + ' / ' + maxRetry + ')' + "\n";
    });

    client.send(opts.argv[0], function (err, result) {
      console.log("\n" + '---- ' + o.host + ' ----' + "\n");

      if (options.verbose && retryLog) {
        console.error(retryLog);
      }

      if (err) {
        console.error(err.stack || err.message || err);
      }

      if (result) {
        if (opts.options.verbose) {
          console.log(result);
        } else {
          if (result.stderr) {
            console.error(clc.red.bold(result.stderr) + "\n");
          }

          console.log(clc.green(result.stdout));
        }
      }

      done();
    });
  }, opts.options.batchSize);

  hostQueue.buffer = opts.options.batchSize;

  hostQueue.saturated = function () {
    hostQueue.pause();
  };

  hostQueue.unsaturated = function () {
    if (!done && opts.options.delay) {
      setTimeout(hostQueue.resume.bind(hostQueue), opts.options.delay);
      return;
    }

    hostQueue.resume();
  };

  hostQueue.empty = function () {
    done = true;
  };

  var liner = new Liner();

  liner.on('error', function (err) {
    console.error(err.message || err);
    process.exit(3);
  });

  liner.on('data', function (line) {
    hostQueue.push(line);
  });

  process.stdin.pipe(liner);
} else {
  options.host = opts.argv[0].trim().toLowerCase();

  var client = new Client(options);

  if (options.verbose) {
    client.on('retry', function (retry, maxRetry) {
      console.error('failed to connect to ' + options.host + '.  retrying (' + retry + ' / ' + maxRetry + ')');
    });
  }

  client.send(opts.argv[1], function (err, result) {
    if (err) {
      console.error(err.stack || err.message || err);
    }

    if (result) {
      if (opts.options.verbose) {
        console.log(result);
      } else {
        if (result.stderr) {
          console.error(clc.red.bold(result.stderr) + "\n");
        }

        console.log(clc.green(result.stdout));

        process.exit(result.exitCode);
      }
    }
  });
}