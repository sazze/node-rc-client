#!/usr/bin/env node

var _ = require('lodash');
var Client = require('../');
var fs = require('fs');
var Getopt = require('node-getopt');
var clc = require('cli-color');

var getopt = new Getopt([
  ['', 'keyDir=DIR', 'directory where key is found'],
  ['', 'configFile=FILE', 'json file with config options'],
  ['p', 'port=PORT', 'the port to connect to'],
  ['k', 'key=NAME', 'the name of the key to use'],
  ['v', 'verbose', 'display raw response information'],
  ['h', 'help', 'display this help message']
]);

getopt.setHelp(
  'Usage: rc [OPTIONS] HOST COMMAND' + "\n" +
  'Send a COMMAND to a HOST running the remote-command service' + "\n" +
  "\n" +
  'HOST        the hostname or ip address of the host to run the command on' + "\n" +
  'COMMAND     the command to run on the host' + "\n" +
  "\n" +
  '[[OPTIONS]]' + "\n" +
  "\n" +
  'Version: ' + require('../package.json').version + "\n" +
  'Repository: ' + require('../package.json').repository.url.replace('/\.git$/', '') + "\n"
);

var opts = getopt.parseSystem();

if (opts.options.help) {
  getopt.showHelp();
  process.exit(0);
}

var options = {};

if (opts.options.configFile) {
  _.merge(options, require(opts.options.configFile));
}

if (opts.options.keyDir) {
  options.keyDir = opts.options.keyDir;
}

if (opts.options.key) {
  options.keyName = opts.options.key;
}

if (opts.options.port) {
  options.port = opts.options.port;
}

if (opts.argv.length != 2) {
  console.error('Invalid arguments');
  getopt.showHelp();
  process.exit(1);
}

options.host = opts.argv[0];

var client = new Client(options);

client.send(opts.argv[1], function (err, result) {
  if (err) {
    console.error(err.stack || err.message || err);
  }

  if (result) {
    if (opts.options.verbose) {
      console.log(result);
    } else {
      if (result.stderr) {
        console.error(clc.red.bold(result.stderr));
      }

      console.log(clc.green(result.stdout));

      process.exit(result.exitCode);
    }
  }
});